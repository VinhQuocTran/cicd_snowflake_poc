# buildspec.yml
version: 0.2

env:
  variables:
    SNOWFLAKE_ACCOUNT: "YWCMEWI-NQ94599"
    SNOWFLAKE_USER: "VINHQUOC2049"
    SNOWFLAKE_ROLE: "ACCOUNTADMIN" # WARNING: Consider using a least-privilege role for production
    SNOWFLAKE_WAREHOUSE: "COMPUTE_WH"
    SNOWFLAKE_DATABASE: "OPERATION"
    SNOWFLAKE_SCHEMA: "PUBLIC"
    SNOWFLAKE_GIT_STAGE: "OPERATION.SAC_MONITORING.SAC_GIT_REPO"

  # --- SECURELY RETRIEVE PRIVATE KEY AND PASSPHRASE FROM SECRETS MANAGER ---
  # IMPORTANT: Replace 'your-secrets-manager-secret-name-for-private-key' and 'your-json-key-name-for-private-key'
  # with the EXACT names as they appear in AWS Secrets Manager.
  # If your secret 'my_cicd_key_secret' contains both keys:
  secrets-manager:
    PRIVATE_KEY_CONTENT_VAR: "my_cicd_key_secret:PRIVATE_KEY_CONTENT"
    PRIVATE_KEY_PASSPHRASE_VAR: "my_cicd_key_secret:PRIVATE_KEY_PASSPHRASE"

phases:
  install:
    commands:
      # Enable verbose output and exit immediately on error for debugging
      - set -eux

      - echo "Updating system packages and installing common dependencies..."
      # Update package lists and install common libraries often needed by Python-based tools
      # 'libffi-dev' and 'libssl-dev' are frequently required for cryptography-related Python packages
      # 'python3-dev' might also be needed for some SnowSQL versions or underlying dependencies
      # Ensure your CodeBuild image is Debian/Ubuntu-based for apt-get to work.
      - apt-get update -y
      - apt-get install -y libffi-dev libssl-dev python3-dev

      - echo "Downloading SnowSQL CLI installer..."
      # Using the specific version 1.2.32 as per your previous log.
      - SNOWSQL_INSTALLER_URL="https://sfc-repo.snowflakecomputing.com/snowsql/bootstrap/1.2/linux_x86_64/snowsql-1.2.32-linux_x86_64.bash"
      - SNOWSQL_INSTALLER_FILENAME="snowsql-installer.bash"
      - curl -fL -o "${SNOWSQL_INSTALLER_FILENAME}" "${SNOWSQL_INSTALLER_URL}"

      - echo "Making installer executable..."
      - chmod +x "${SNOWSQL_INSTALLER_FILENAME}"

      - echo "Executing SnowSQL CLI installer..."
      # Set SNOWSQL_DEST as an environment variable for the bash command
      - SNOWSQL_DEST=./snowsql_install bash "${SNOWSQL_INSTALLER_FILENAME}" -y

      - export PATH=$PATH:./snowsql_install/bin
      - echo "SnowSQL CLI installed."

  build:
    commands:
      - set -eux
      - echo "Starting Snowflake Git Stage Refresh..."

      # Write the private key content (retrieved from Secrets Manager) to a temporary file.
      - echo "$PRIVATE_KEY_CONTENT_VAR" > /tmp/snowflake_private_key.p8
      # Set strict permissions for the private key file (read-only for owner).
      - chmod 400 /tmp/snowflake_private_key.p8

      # Set the passphrase as an environment variable for SnowSQL.
      - export SNOWSQL_PRIVATE_KEY_PASSPHRASE="$PRIVATE_KEY_PASSPHRASE_VAR"

      # Execute SnowSQL command to refresh the Git stage.
      - snowsql -a $SNOWFLAKE_ACCOUNT -u $SNOWFLAKE_USER -r $SNOWFLAKE_ROLE -w $SNOWFLAKE_WAREHOUSE -d $SNOWFLAKE_DATABASE -s $SNOWFLAKE_SCHEMA -o exit_on_error=true -q -i /tmp/snowflake_private_key.p8 <<< "ALTER STAGE $SNOWFLAKE_GIT_STAGE REFRESH;"

      - echo "Snowflake Git Stage Refresh completed."

      # Clean up the private key file from the build environment for security.
      - rm /tmp/snowflake_private_key.p8

artifacts:
  files:
    - '**/*'
  discard-paths: yes